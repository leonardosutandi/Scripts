%% Participant information
clear; clc;
% _______________________________________________________________________________________
% _______________________________________________________________________________________
group = 'MA';
participantNum = '35';
% _______________________________________________________________________________________
% _______________________________________________________________________________________

filepath = ['C:\MATLAB\exp_1\results\EEG\' group '\participant_' participantNum '\']; % C for local, F for pav_SSD, D for Zbook_SSD

% Load Data Sets
if ~strcmp(participantNum, '27')
    load([filepath 's1_preprocessing_done.mat']);
    load([filepath 's1_preprocessing_ica_done.mat']);
    % load([filepath 'data_trigger.mat']);
    % load([filepath 'trl.mat']);
    % load([filepath 'event.mat']);
end

% Append any seperated EEG data
if strcmp(participantNum, '27')

    filepatha = ['C:\MATLAB\exp_1\results\EEG\' group '\participant_27a\']; 
    load([filepatha 's1_preprocessing_done.mat']);
    load([filepatha 's1_preprocessing_ica_done.mat']);
    data1 = data; data_ica1 = data_ica;

    clear data data_ica

    filepathb = ['C:\MATLAB\exp_1\results\EEG\' group '\participant_27b\']; 
    load([filepathb 's1_preprocessing_done.mat']);
    load([filepathb 's1_preprocessing_ica_done.mat']);
    data2 = data; data_ica2 = data_ica;

    clear data data_ica

    cfg = [];
    data = ft_appenddata(cfg, data1, data2);

    cfg = [];
    data_ica = ft_appenddata(cfg, data_ica1, data_ica2);

end

%% Mark artifacts

% % Data with preserved trigger marks***
% load([filepath 'data_trigger.mat']);

% ***NOTE:
% data_trigger have almost twice the length at x axis (original?). Only defined epochs 
% are visible in ft_databrowser(). Seems like data_ica stitch (force) epoch 
% data becoming continuous, hence shorter x axis total (doesn't look like it 
% though). Won't work with data_trigger because tagging artifact via this
% date set will not be compatible with the already shortened data and
% data_ica.

% Select using mouse for BDP (e.g. muscles, jumps). Next chunck to actually
% remove.

cfg = [];
cfg.channel = 'all';
cfg.layout = 'biosemi64.lay';
cfg.continuous = 'yes';
cfg.plotevents = 'yes';
cfg.viewmode = 'vertical';
cfg.ylim = [-30 30];
cfg.blocksize = [8];
cfg = ft_databrowser(cfg, data_ica);

% Time segments to remove
bad_segment = cfg.artfctdef.visual.artifact;
save([filepath 'bad_segment.mat'],'bad_segment', '-v7.3');

%% Load bad segment again (if needed)

% Reload bad_segment
load([filepath 'bad_segment.mat']);

%% Remove artifacts from ICA data set

% only on ICA data set to preserve main data set time segments.
cfg = [];
cfg.artfctdef.reject = 'zero';
cfg.artfctdef.visual.artifact = bad_segment;

data_ica = ft_rejectartifact(cfg, data_ica);
data = ft_rejectartifact(cfg, data);

% % Check how many epochs left
% num_ng_left = size(find(data1.trialinfo(:,1) == 13), 1);
% num_ng_right = size(find(data1.trialinfo(:,1) == 14), 1);
% num_ng_neutral = size(find(data1.trialinfo(:,1) == 15), 1);
% 
% num_g_left = size(find(data1.trialinfo(:,1) == 23), 1);
% num_g_right = size(find(data1.trialinfo(:,1) == 24), 1);
% num_g_neutral = size(find(data1.trialinfo(:,1) == 25), 1);

%% Tag Bad Channel(s)

% Prepare bad channel(s)
bad_channels = {'P9'};
save([filepath 'bad_channels.mat'], 'bad_channels', '-v7.3');

%% Load Bad Channels (if needed)

load([filepath 'bad_channels.mat']);

%% Remove Bad Channel(s)

all_channels = {'Fp1', 'AF7', 'AF3', 'F1', 'F3', 'F5', 'F7', 'FT7', ...
                'FC5', 'FC3', 'FC1', 'C1', 'C3', 'C5', 'T7', 'TP7', ...
                'CP5', 'CP3', 'CP1', 'P1', 'P3', 'P5', 'P7', 'P9', ...
                'PO7', 'PO3', 'O1', 'Iz', 'Oz', 'POz', 'Pz', 'CPz', ...
                'Fpz', 'Fp2', 'AF8', 'AF4', 'AFz', 'Fz', 'F2', 'F4', ...
                'F6', 'F8', 'FT8', 'FC6', 'FC4', 'FC2', 'FCz', 'Cz', ...
                'C2', 'C4', 'C6', 'T8', 'TP8', 'CP6', 'CP4', 'CP2', ...
                'P2', 'P4', 'P6', 'P8', 'P10', 'PO8', 'PO4', 'O2', ...
                'EXG3', 'EXG4', 'EXG5', 'EXG6', 'EXG7', 'EXG8'};

keep_channels = all_channels(~ismember(all_channels, bad_channels));

% Remove here
cfg = [];
cfg.channel = keep_channels;

data = ft_preprocessing(cfg, data);
data_ica = ft_preprocessing(cfg, data_ica);

%% Save Data Sets

save([filepath 's2_rbd_done.mat'], 'data', '-v7.3');
save([filepath 's2_rbd_ica_done.mat'], 'data_ica', '-v7.3');

clear; clc;
disp("Step 2 Remove Bad Data: DONE")

%% Repair bad channel(s) on both data set >>>>>>>>> Doesn't work on ICA (both bad and missingchannel)

% IF YES, BEFORE SAVE

% % % Prepare bad channel(s)
% % bad_channel = {''};
% % save([filepath 'bad_channel.mat'],'bad_channel', '-v7.3');
% % 
% % % % Reload (if needed)
% % % load([filepath 'bad_channel.mat']);
% 
% % Prepare neighbours
% cfg = [];
% cfg.method = 'triangulation';
% cfg.layout = 'biosemi64.lay';
% % cfg.template = 'biosemi64_neighb.mat'; % for 'template'
% neighbours = ft_prepare_neighbours(cfg);
% 
% % Repair/interpolate bad channel(s) on the spot
% cfg = [];
% cfg.method = 'average'; % 'weighted', 'spline', 'slap' or 'nan'
% cfg.missingchannel = bad_channels;
% cfg.neighbours = neighbours;
% cfg.trials = 'all';
% 
% data = ft_channelrepair(cfg, data);
% data_ica = ft_channelrepair(cfg, data_ica);
% 
% % NOTE:
% % cfg.badchannel here gives ICA problem runica(): quitting - weight matrix may not be invertible! 
% % weighted does not work.



























